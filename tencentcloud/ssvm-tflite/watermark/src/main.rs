use image;
use imageproc::{drawing};
use rusttype::{Font, Scale};
use std::io::{self, Read};
use serde::Deserialize;
mod imagecrop;

const MAX_WIDTH : u32 = 349;
const MAX_HEIGHT : u32 = 80;
const MAX_FONT_SIZE : f32 = 125.0;
const FAR_LEFT : u32 = 200;
const FAR_TOP : u32 = 590;

fn write_to_crop(watermark_text: &str) -> u32 {
  let buffer = [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 11, 184, 0, 0, 0, 100, 8, 2, 0, 0, 0, 153, 140, 234, 128, 0, 0, 0, 25, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 65, 100, 111, 98, 101, 32, 73, 109, 97, 103, 101, 82, 101, 97, 100, 121, 113, 201, 101, 60, 0, 0, 3, 37, 105, 84, 88, 116, 88, 77, 76, 58, 99, 111, 109, 46, 97, 100, 111, 98, 101, 46, 120, 109, 112, 0, 0, 0, 0, 0, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 98, 101, 103, 105, 110, 61, 34, 239, 187, 191, 34, 32, 105, 100, 61, 34, 87, 53, 77, 48, 77, 112, 67, 101, 104, 105, 72, 122, 114, 101, 83, 122, 78, 84, 99, 122, 107, 99, 57, 100, 34, 63, 62, 32, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107, 61, 34, 65, 100, 111, 98, 101, 32, 88, 77, 80, 32, 67, 111, 114, 101, 32, 54, 46, 48, 45, 99, 48, 48, 51, 32, 55, 57, 46, 49, 54, 52, 53, 50, 55, 44, 32, 50, 48, 50, 48, 47, 49, 48, 47, 49, 53, 45, 49, 55, 58, 52, 56, 58, 51, 50, 32, 32, 32, 32, 32, 32, 32, 32, 34, 62, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34, 62, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 34, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 77, 77, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 109, 109, 47, 34, 32, 120, 109, 108, 110, 115, 58, 115, 116, 82, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 115, 84, 121, 112, 101, 47, 82, 101, 115, 111, 117, 114, 99, 101, 82, 101, 102, 35, 34, 32, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 61, 34, 65, 100, 111, 98, 101, 32, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 50, 50, 46, 49, 32, 40, 77, 97, 99, 105, 110, 116, 111, 115, 104, 41, 34, 32, 120, 109, 112, 77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 61, 34, 120, 109, 112, 46, 105, 105, 100, 58, 52, 51, 67, 49, 55, 70, 70, 57, 51, 68, 49, 69, 49, 49, 69, 66, 65, 57, 65, 67, 66, 54, 68, 56, 67, 66, 49, 67, 56, 70, 67, 49, 34, 32, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 52, 51, 67, 49, 55, 70, 70, 65, 51, 68, 49, 69, 49, 49, 69, 66, 65, 57, 65, 67, 66, 54, 68, 56, 67, 66, 49, 67, 56, 70, 67, 49, 34, 62, 32, 60, 120, 109, 112, 77, 77, 58, 68, 101, 114, 105, 118, 101, 100, 70, 114, 111, 109, 32, 115, 116, 82, 101, 102, 58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 61, 34, 120, 109, 112, 46, 105, 105, 100, 58, 52, 51, 67, 49, 55, 70, 70, 55, 51, 68, 49, 69, 49, 49, 69, 66, 65, 57, 65, 67, 66, 54, 68, 56, 67, 66, 49, 67, 56, 70, 67, 49, 34, 32, 115, 116, 82, 101, 102, 58, 100, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 52, 51, 67, 49, 55, 70, 70, 56, 51, 68, 49, 69, 49, 49, 69, 66, 65, 57, 65, 67, 66, 54, 68, 56, 67, 66, 49, 67, 56, 70, 67, 49, 34, 47, 62, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 32, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 32, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 101, 110, 100, 61, 34, 114, 34, 63, 62, 80, 34, 87, 236, 0, 0, 4, 117, 73, 68, 65, 84, 120, 218, 236, 218, 49, 1, 0, 32, 12, 192, 48, 192, 191, 231, 205, 7, 77, 36, 244, 238, 157, 153, 3, 0, 0, 0, 0, 0, 0, 0, 0, 191, 123, 18, 0, 0, 0, 0, 0, 0, 0, 0, 80, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 130, 81, 6, 0, 0, 0, 0, 0, 0, 0, 128, 4, 163, 12, 0, 0, 0, 0, 0, 0, 0, 0, 9, 70, 25, 0, 0, 0, 0, 0, 0, 0, 0, 18, 140, 50, 0, 0, 0, 0, 0, 0, 0, 0, 36, 24, 101, 0, 0, 0, 0, 0, 0, 0, 0, 72, 48, 202, 0, 0, 0, 0, 0, 0, 0, 0, 144, 96, 148, 1, 0, 0, 0, 0, 0, 0, 0, 32, 193, 40, 3, 0, 0, 0, 0, 0, 0, 0, 64, 194, 10, 48, 0, 184, 150, 3, 197, 238, 216, 231, 199, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130];
  let mut img = image::load_from_memory(&buffer.to_vec()).unwrap();

  let scale = Scale {
    x: MAX_FONT_SIZE,
    y: MAX_FONT_SIZE,
  };

  let font = Vec::from(include_bytes!("PingFang Bold.ttf") as &[u8]);
  let font = Font::try_from_vec(font).unwrap();

  drawing::draw_text_mut(&mut img, image::Rgba([0u8, 0u8, 0u8, 1u8]), 0, 0, scale, &font, watermark_text);

  let mut buf = vec![];
  img.write_to(&mut buf, image::ImageOutputFormat::Png).unwrap();

  let ic = imagecrop::ImageCrop::new(img).unwrap();
  let corners = ic.calculate_corners();
  // println!("{:?}", corners);
  return corners.1.x - corners.0.x;
}

fn main() {
    let img_buf: &[u8] = include_bytes!("template.png");
    let mut buffer = String::new();
    io::stdin().read_to_string(&mut buffer).expect("Error reading from STDIN");
    let obj: FaasInput = serde_json::from_str(&buffer).unwrap();
    let watermark_text = &(obj.body);
 
    let width = write_to_crop(watermark_text);

    let mut left = FAR_LEFT;
    let mut top = FAR_TOP;
    let mut font_size = MAX_FONT_SIZE;

    if width < MAX_WIDTH {
      left = FAR_LEFT + (MAX_WIDTH - width) / 2;
    } else {
      font_size = (MAX_WIDTH as f32) / (width as f32) * MAX_FONT_SIZE;
      top = FAR_TOP + ((1.0 - (MAX_WIDTH as f32) / (width as f32)) * (MAX_HEIGHT as f32)) as u32;
    }
    // println!("left: {}", top);

    // println!("image size is {}", img_buf.len());
    let mut img = image::load_from_memory(img_buf).unwrap();
    let scale = Scale {
      x: font_size,
      y: font_size,
    };

    let font = Vec::from(include_bytes!("PingFang Bold.ttf") as &[u8]);
    let font = Font::try_from_vec(font).unwrap();

    // println!("Drawing ...");
    drawing::draw_text_mut(&mut img, image::Rgba([255u8, 255u8, 255u8, 255u8]), left, top, scale, &font, watermark_text);

    // println!("Returning ...");
    let mut buf = vec![];
    // img.write_to(&mut buf, image::ImageOutputFormat::Png).unwrap();
    // println!("{}", base64::encode_config(buf, base64::STANDARD));
    img.write_to(&mut buf, image::ImageOutputFormat::Jpeg(80u8)).expect("Unable to write");
    println!("{}", base64::encode_config(buf, base64::STANDARD));
}

#[derive(Deserialize, Debug)]
struct FaasInput {
    body: String
}
